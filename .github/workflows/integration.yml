name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    services:
      # Add any services your integration tests need
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Start test MCP server
      run: |
        cd /home/runner/work/egile-mcp-client/egile-mcp-client
        poetry run python simple_mcp_server.py &
        sleep 5  # Give server time to start

    - name: Run integration tests
      run: |
        poetry run pytest tests/ -v -m integration --cov=egile_mcp_client
      env:
        # Add any environment variables needed for integration tests
        MCP_SERVER_URL: "http://localhost:8000"
        TEST_MODE: "integration"

    - name: Test CLI commands
      run: |
        # Test various CLI commands
        poetry run egile-mcp-client --help
        poetry run egile-mcp-client config --validate
        poetry run egile-mcp-client tools --list || true  # Allow failure if no servers configured

    - name: Test web interface startup
      run: |
        # Start web interface and test it responds
        poetry run egile-mcp-client web --port 8080 &
        sleep 10
        curl -f http://localhost:8080/health || echo "Web interface health check failed"
        pkill -f "egile-mcp-client web" || true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results/
          coverage.xml

  docker-integration:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t egile-mcp-client:test .

    - name: Run container smoke test
      run: |
        docker run --rm egile-mcp-client:test --help
        docker run --rm egile-mcp-client:test config --validate

    - name: Test container with volume mounts
      run: |
        mkdir -p test-config
        cp config.example.yaml test-config/config.yaml
        docker run --rm -v $(pwd)/test-config:/app/config egile-mcp-client:test config --validate
