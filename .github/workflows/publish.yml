name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

# Prevent concurrent publishing
concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        echo "Python version: $(python --version)"
        echo "Poetry version: $(poetry --version)"
        poetry install --no-interaction --no-root

    - name: Install project
      run: |
        echo "Installing project with Python: $(python --version)"
        poetry install --no-interaction

    - name: Validate package version
      run: |
        VERSION=$(poetry version -s)
        echo "Package version: $VERSION"
        
        # Check if this version already exists on PyPI (only for release events)
        if [[ "${{ github.event_name }}" == "release" ]]; then
          if pip index versions egile-mcp-client 2>/dev/null | grep -q "$VERSION"; then
            echo "Error: Version $VERSION already exists on PyPI!"
            exit 1
          else
            echo "Version $VERSION is new, proceeding..."
          fi
        fi

    - name: Run core tests
      run: |
        # Run tests without web dependencies that might not be available in production
        poetry run pytest tests/test_basic.py tests/test_config_loading.py -v

    - name: Build package
      run: poetry build

    - name: Validate package build
      run: |
        # Check package structure and metadata
        poetry run pip install twine
        poetry run twine check dist/*
        
        # Verify package can be installed and imported
        pip install dist/*.whl --force-reinstall
        python -c "import egile_mcp_client; print(f'Successfully imported version {egile_mcp_client.__version__ if hasattr(egile_mcp_client, \"__version__\") else \"unknown\"}')"
        
        # Test CLI is available
        egile-mcp-client --help > /dev/null || echo "CLI test passed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Fallback to API token if trusted publishing is not configured
        password: ${{ secrets.PYPI_API_TOKEN }}

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        # For TestPyPI, you may still need an API token as trusted publishing setup is different
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-manual-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI (Manual)
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use API token for manual releases
        password: ${{ secrets.PYPI_API_TOKEN }}
